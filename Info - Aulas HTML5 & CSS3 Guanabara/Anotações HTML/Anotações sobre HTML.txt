
                                                                   == Tags HTML ==

  del = 
Marca um texto como excluído para indicar que ele deve ser lido, mas não considerado

  mark = 
cria texto marcado (como um marca texto)

  strong = 
para textos em negrito

  hr =
representa uma quebra temática entre elementos de nível de parágrafo

  p =
A tag "p" é utilizada para demarcar um parágrafo. O elemento HTML < p > (ou Elemento HTML Parágrafo) representa um parágrafo do texto.
Posso colocar um espaçamento no ínicio do parágrafo chamado a propriedade CSS "text-indent" que especifica a quantidade de recuo (espaço vazio) que é colocado antes de linhas de texto em um bloco.

  em = 
Texto em ênfase

  ins = 
marca um texto como inserido para dar uma ênfase e indicar que ele foi adicionado depois.

  sup = 
Para inserir coisas do tipo: x elevado a 20, 2 elevado a 2

  sub = 
Para inserir coisas do tipo: H₂O (números ou letras subscritos)

  code = 
para deixar um fonte monoespaçada ( tipografia em que todos os caracteres têm a mesma largura, criando uma aparência uniforme)

  pre = 
Um texto dentro desse elemento é tipicamente exibido em uma fonte não proporcional da mesma maneira em que o texto original foi disposto no código. Espaços em branco são mantidos no texto da mesma forma em que este foi digitado.

  q = 
indica que o texto dentro da tag é uma pequena citação. Exemplo: Como diria o pai de um amigo do Guanabara: <q>o computador é um burro muito rápido</q>

  blockquote = 
O Elemento HTML <blockquote> (citação de bloco), indica que o texto incluído é uma longa citação.

  cite =
Dentro da tag <blockquote> pode-se adicionar o elemento <cite> que representa uma referência a um trabalho artístico. Deve incluir o título do trabalho ou uma URL de referência.

  abbr = 
O Elemento HTML <abbr> (ou Elemento de Abreviação HTML) representa uma abreviação e opcionalmente fornece uma descrição completa para ela.

  ul = 
A tag <ul> (unordered list) é usada para definir uma lista não ordenada e a tag <li> é usada para cada item da lista.

  ol = 
A tag <ol> (ordered list) é usada para definir uma lista ordenada e a tag <li> é usada para cada item da lista.

  dt = 
O elemento HTML <dt> (ou Elemento HTML de Definição de Termo) identifica um termo na lista de definição. Este elemento pode ocorrer somente dentro de uma tag <dl> . Geralmente seguido por um elemento <dd> ; ou multiplos <dt> na mesma linha indicam vários termos sendo definidos pelo próximo element <dd>.

  dd =
O elemento HTML <dd> fornece detalhes ou uma definição mais completa do termo precedente (definido por <dt> ) numa lista de descrições ( <dl> ).

  a = 
O elemento <a> em HTML (ou elemento âncora), com o atributo href cria-se um hiperligação nas páginas web, arquivos, endereços de emails, ligações na mesma página ou endereços na URL. O conteúdo dentro de cada <a>   precisará indicar o destino do link.

  (Note 1: Dentro do código <a href=""></a> , coloque as tags taget="_blank" e rel="" para abrir o link em uma guia diferente da do seu site).
  (Note 2: Usar a tag rel="noreferrer noopener" evita "exploit" para window.openerAPI e evita que o desempenho de sua página fique pior caso o site externo use JavaScript)
  (Note 3: Usar a tag rel="next" e rel="prev" para links internos, "next" para links que levam para a próxima página e "prev" para links que levam a páginas anteriores)
  (Note 4: Usar a tag rel="nofollow" para links externos, o atributo nofollow diz aos mecanismos de busca do Google para não seguirem algum link externo que esteja sendo marcado — o que é basicamente dizer que o site não   recomenda o link.)



                                                            ==  TAGS PARA IMAGENS ==

  picture =
O elemento HTML <picture> é um container usado para especificar múltiplos elementos **<source: media: type>** para um elemento específico <img> contido nele.  Permitindo carregar diferentes arquivos de imagem através de: Media Queries, para diferentes resoluções e orientações de tela. Densidade de pixels, para diferentes tipos de dispositivos.

  img =
O elemento **HTML <img> **(ou HTML Image Element) representa a inserção de imagem no documento, sendo implementado também pelo HTML5 para uma melhor experiência com o elemento <figure> e <figcaption> .

  source =
O elemento source é utilizado para especificar múltiplos recursos de mídia de elementos <picture> , <audio> ou <video> em HTML5.
(Note 1: adicionar <source: media: type> para colocar diferentes tamanhos de imagens, em ordem do menor para o maior, (ex: 300px, 700px, 1000px)  para a imagem se adaptar a diferentes tamanhos de tela



                                                           ==  TAGS PARA AÚDIOS ==

  audio =
O elemento audio é utilizado para embutir conteúdo de som em um documento HTML ou XHTML.

  (Note 1: adicionar <source: src> para colocar mais formatos de aúdios, como mp3, ogg e wav, (obs: não utilizar o formato wav, pois é muito pesado) por que alguns navegadores não tem compatibilidade com arquivos mp3.)

  volume =
Especifica a configuração de volume inicial do elemento de áudio, em um intervalo de 0,0 a 1,0.

  preload = Solicita um comportamento de pré-carregamento específico para o navegador, que o navegador pode ou não seguir.

  (Note 1: preload="auto" neste o navegador acha que deve carregar todo o arquivo de aúdio quando o site carregar)
  (Note 2: preload="metadata" Esse é o melhor e neste o navegador achar que deve carregar apenas metadados (tamanho, tempo, info. de direitos, etc) quando o site carregar)
  (Note 3: preload="none" neste o navegador acha que NÃO deve carregar  absolutamente nada do arquivo de áudio quando a página carregar, só carregará quando a pessoa clicar no botão de play.)

  muted = Especifica que o volume do reprodutor de áudio deve inicialmente ser silenciado.

  loop = Especifica que o conteúdo de áudio deve ser repetido indefinidamente após o início da reprodução.

  controls = Alterna a exibição dos controles de reprodução de áudio.

  autoplay = Especifica que a reprodução do áudio deve começar imediatamente no carregamento da página.

  src = Especifica o arquivo de origem de um elemento de áudio. (URL)

                                  

                                                         ==  TAGS PARA VÍDEOS ==

                                    Formatos de aquivos de vídeo: mp4/m4v, ogv e WebM

  video = 
A <video> tag é usada para incorporar conteúdo de vídeo em um documento, como um clipe de filme ou outros fluxos de vídeo.
A <video> tag contém uma ou mais <source> tags com diferentes fontes de vídeo. O navegador escolherá a primeira fonte compatível.
(Note 1: adicionar <source: src> para colocar mais formatos de vídeos, como mp4, mkv, ogg e WebM, por que alguns navegadores não tem compatibilidade com alguns formatos)

  autoplay =
O vídeo começará a ser reproduzido assim que estiver pronto

  controls = 
Especifica que os controles de vídeos devem ser exibidos (como botão de play, pausa, etc)

  height = 
define a altura do vídeo na página (como um width que define a largura)

  loop = 
Especifica que o vídeo recomeçará sempre que ele terminar

  muted = 
Define que o vídeo sempre começará silenciado

  poster = 
define uma imagem a ser mostrada durante o carregamento do vídeo ou até que o usuário aperte o botão do play

  preload = 
Especifica se e como o autor acha que o vídeo deve ser carregado quando a página for carregada

  (Note 1: preload="auto" / preload="metadata" / preload="none")
  (Note 2: preload="metadata" é o melhor)

  src = 
especifica a URL do arquivo de vídeo

  width =
Define a largura do player do vídeo (como um height que define a altura)



                                                         ==  MODULO 2 HTML E CSS  ==


                                                   ==  Grouping Tags e Semantic Tags  ==


A linguagem HTML padrão tinha apenas duas tags de agrupamento genérico: a <div>
e a <span>. A diferença básica entre elas é que a primeira é um elemento agrupador
do tipo block-level e o segundo é inline-level. No mais, eles agem exatamente da
mesma maneira, servindo para juntar vários outros elementos HTML.

Com o surgimento da HTML5, surgiram as tags semânticas de agrupamento. Isso não
significa que as <div> e <span> (agora chamadas de não-semânticas) deixaram de
existir ou ficaram obsoletas, mas seu uso agora faz menos sentido, pois temos tags
para dividir as partes do nosso documento HTML.

Vamos compreender a partir de agora os principais agregadores semânticos da
HTML5.


==> Header:

Cria áreas relativas a cabeçalhos. Pode ser o cabeçalho principal de um site ou até
mesmo o cabeçalho de uma seção ou artigo. Normalmente inclui títulos <h1> - <h6>
e subtítulos. Podem também conter menus de navegação.

==> Nav:

Define uma área que possui os links de navegação pela estrutura de páginas que vão 
compor o website. Um <nav> pode estar dentro de um <header>.

==> Main:

É um agrupador usado para delimitar o conteúdo principal do nosso site. Normalmente 
concentra as seções, artigos e conteúdos periféricos.

==> Section:

Cria seções para sua página. Ela pode conter o conteúdo diretamente no seu corpo ou
dividir os conteúdos em artigos com conteúdos específicos. Segundo a documentação
oficial da W3C, “uma section é um agrupamento temático de conteúdos, tipicamente
com um cabeçalho”.

==> Article:

Um artigo é um elemento que vai conter um conteúdo que pode ser lido de forma
independente e dizem respeito a um mesmo assunto. Podemos usar um <article>
para delimitar um post de blog ou fórum, uma notícia, etc.

==> Aside:

Delimita um conteúdo periférico e complementar ao conteúdo principal de um artigo
ou seção. Normalmente um conteúdo <aside> está posicionado ao lado de um
determinado texto ou até mesmo no meio dele, exatamente como fizemos no bloco de
texto apresentado anteriormente, falando sobre “MÚLTIPLOS NÍVEIS”.

==> Footer:

Cria um rodapé para o site inteiro, seção ou artigo. É um conteúdo que não faz parte
diretamente do conteúdo nem é um conteúdo periférico ( o que caracterizaria um <aside> ), 
mas possui informações sobre autoria do conteúdo, links adicionais, mapa do site, documentos relacionados.



                                                       ==  MODULO 3 HTML E CSS  ==


                                                 ==  INFORMAÇÕES SOBRE TABELAS  ==


Todas as tabelas mais simples, possuem a seguinte hierarquia:

  <table>
         <tr>
               <th><th/>
               <td><td/>	
         <tr/>
  <table/>

table  => tabela
table row ( tr )  => linha de tabela
table header ( th )  => cabeçalho de tabela
table data ( td )  => dado de tabela

Obs : se a hierarquia da tabela não for obedecida, os intens irão aparecer ou antes ou depois da tabela



O elemento <table> HTML representa dados tabulares — isto é, informações apresentadas em uma tabela bidimensional composta por linhas e colunas de células contendo dados.
Saiba mais -> https://developer.mozilla.org/pt-BR/docs/Web/HTML/Element/table



O elemento HTML <caption> especifica a legenda ( ou título ) de uma tabela.
Propriedades CSS que podem ser especialmente úteis para estilizar o elemento <caption> :
==> text-align e caption-side
Saiba mais -> https://developer.mozilla.org/pt-BR/docs/Web/HTML/Element/caption



O elemento <tr> ( table row ) que significa table row é usada para definir uma linha. As células da linha podem então ser estabelecidas usando uma combinação de elementos <td> ( dado de tabela ) e <th> (cabeçalho de tabela).
Saiba mais -> https://developer.mozilla.org/en-US/docs/Web/HTML/Element/tr



O elemento HTML <th> ( table header ) define uma célula cabeçalho do grupo de células de sua tabela. A exatidão natural deste grupo é definida pelos atributos scope e headers.

Este elemento inclui os atributos globais .

O mais importantes (no momento) é:

==> scope
Define as células às quais o elemento cabeçalho ( definido no <th> ) se relaciona. Os possíveis valores enumerados são:

row:  -> o cabeçalho refere-se a todas as células da linha a que pertence;
col:  -> o cabeçalho refere-se a todas as células da coluna a que pertence;
rowgroup:  -> o cabeçalho pertence a um rowgroup e está relacionado a todas as suas células;
colgroup:  -> o cabeçalho pertence a um colgroup e está relacionado a todas as suas células.

Se o scope atributo não for especificado ou seu valor não for row, col, rowgroup ou colgroup, os navegadores selecionarão automaticamente o conjunto de células ao qual a célula de cabeçalho se aplica.
Saiba mais -> https://developer.mozilla.org/pt-BR/docs/Web/HTML/Element/th



O elemento HTML <td> define uma célula de uma tabela que contém dados e pode ser usada como filho do elemento <tr> (table row).
Saiba mais -> https://developer.mozilla.org/en-US/docs/Web/HTML/Element/td



Para organizar semanticamente a tabela, são utilizadas para dividir o conteúdo da tabela em três: cabeçalho ( <thead> ), corpo ( <tbody> ) e o rodapé ( <tfoot> ).

O elemento HTML <thead> encapsula um conjunto de linhas da tabela ( elemento <tr> ), indicando que elas compõem o cabeçalho de uma tabela com informações sobre as colunas da tabela. Geralmente isso ocorre na forma de cabeçalhos de coluna ( elementos <th> ).

O elemento HTML <tbody> encapsula um conjunto de linhas da tabela ( elementos <tr> ), indicando que elas compõem o corpo dos dados (principais) de uma tabela.

O elemento HTML <tfoot> encapsula um conjunto de linhas da tabela ( elementos <tr> ), indicando que elas compõem o rodapé de uma tabela com informações sobre as colunas da tabela. Geralmente é um resumo das colunas, por exemplo, uma soma dos números fornecidos em uma coluna.



                                                ==  MESCLAGEM DE CÉLULAS (TABELAS)  ==


As tabelas HTML podem ter células que se estendem por várias linhas e/ou colunas.

Para fazer uma célula abranger várias colunas, use o atributo colspan ( colspan='' '' ) :
Obs: O valor do atributo colspan representa o número de colunas a abranger.

Para fazer uma célula abranger várias linhas, use o atributo rowspan ( rowspan='' '' ) :
Obs: O valor do atributo rowspan representa o número de linhas a abranger.

Saiba mais -> https://www.w3schools.com/html/html_table_colspan_rowspan.asp



                                       ==  AGRUPANDO COLUNAS DAS TABELAS ( COLGROUP )  ==


O elemento HTML <colgroup> define um grupo de colunas dentro de uma tabela. Dentro deste elemento virá o elemento <col>, a quantidade de elementos <col> devem equivaler a quantidade de colunas da tabela, ou adicionar atributos "span" para agrupar 1 elemento <col> em duas colunas.
Exemplo: <col span="2">

Exemplo completo: 
<colgroup>
	<col>
	<col span="2">
	<col span="2" class="exemplo">
</colgroup>

O elemento <col> inclui um atributo global .

Atributo: 

-----> span
Especifica o número de colunas consecutivas que o <colgroup>elemento abrange. O valor deve ser um número inteiro positivo maior que zero. Se não estiver presente, seu valor padrão será 1.

O elemento HTML <col> define uma ou mais colunas em um grupo de colunas representado por seu elemento pai <colgroup>. O elemento <col> só é válido como filho de um elemento <colgroup> que não possui nenhum atributo span definido.

Saiba mais -> https://developer.mozilla.org/en-US/docs/Web/HTML/Element/colgroup
Saiba mais -> https://developer.mozilla.org/en-US/docs/Web/HTML/Element/col



                                                         ==  MÓDULO 4 HTML E CSS  ==


                                                            ==  IFRAME ELEMENTS ==


• Elemento <iframe>

O elemento HTML <iframe> (ou elemento HTML inline frame) representa um contexto de navegação aninhado, efetivamente incorporando outra página HTML para a página atual.

Um <iframe> possui um tamanho padrão de 300x150, 300px de largura e 150px de altura

Atributos:

-----> scrolling
Atributo enumerado que indica quando o navegador deve fornecer uma barra de rolagem (ou outro dispositivo de rolagem) para o quadro, seu valores são :

• auto: Só quando necessário.
• yes: Sempre mostrar uma barra de rolagem.
• no: Nunca mostrar uma barra de rolagem.


-----> height
Indica a altura do quadro HTML 5 em pixels CSS

-----> width
Indica a largura do quadro HTML 5 em pixels CSS

----> frameborder
O valor 1 (o padrão) pede ao navegador para desenhar uma borda entre este quadro e todos os outros quadros. O valor 0 informa ao navegador para não traçar uma fronteira entre este quadro e outros quadros.

-----> srcdoc
O conteúdo da página que o contexto incorporado deve conter. Espera-se que esse atributo seja usado junto com os atributos sandbox e seamless. Se um navegador suportar o atributo srcdoc, ele substituirá o conteúdo especificado no atributo src (se presente). Se um navegador NÃO suportar o atributo srcdoc, ele mostrará o arquivo especificado no atributo src (se presente).

Saiba mais -> https://developer.mozilla.org/pt-BR/docs/Web/HTML/Element/iframe



                                                     ==  NAVEGAÇÃO COM IFRAME  ==


Podemos dar orden a um <iframe> para trocar o seu conteúdo através de links ou códigos JavaScript. O primeiro passo é dar um nome a ele atráves do parâmetro "name".

	<iframe name=''exemplo''  src=''pagina01.html''>
		<p>Seu navegador não é compatível
		com a exibição desse conteúdo</p>
	</iframe>

No código acima o quadro terá 300x150 pixel de tamanho e vai exibir o conteúdo do arquivo pagina01.html (se for compatível, é claro). A diferença aqui é que atribuímos um nome a ele, que agora se chama quadro.

A qualquer lugar do documento original (o que contém o frame), podemos criar um link da seguinte forma:

	<a href=''pagina02.html''  target=''quadro''> Abrir segundo Site </a>

O link que criamos vai abrir a pagina02.html dentro do iframe sempre que o usuário clicar sobre ele, substituindo o conteúdo anterior imediatamente.



                                                  ==  SEGURANÇA NOS IFRAMES  ==


Atributos: 

-----> sandbox
Se especificado como uma sequência vazia, esse atributo ativa restrições extras no conteúdo que pode aparecer no quadro embutido. O valor do atributo pode ser uma string vazia (todas as restrições são aplicadas) ou uma lista separada por espaço de tokens que eliminam restrições específicas. Os valores válidos são:

	• sandbox:
	Valor padrão do parâmetro sandbox.

	• allow-same-origin: 
	Permite que o conteúdo seja tratado como sendo de sua origem normal. Se esta 			palavra-chave não for usada, o conteúdo incorporado será tratado como sendo de 			origem única.

	• allow-top-navigation: 
	permite que o contexto de navegação incorporado navegue (carregue) o conteúdo 			para o contexto de navegação de nível superior. Se esta palavra-chave não for 			utilizada, esta operação não será permitida.

	• allow-forms: 
	permite que o contexto de navegação incorporado envie formulários. Se esta 			palavra-chave não for utilizada, esta operação não será permitida.

	• allow-popups: 
	permite pop-ups (como em window.open).

	• allow-scripts: 
	permite que o contexto de navegação incorporado execute scripts (mas não crie 			janelas pop-up). Se esta palavra-chave não for utilizada, esta operação não será 			permitida.

	• allow-pointer-lock: 
	permite que o contexto de navegação incorporado use a API Pointer Lock


	Observações:

	• Quando o documento incorporado tem a mesma origem da página principal, é fortemente 		desencorajado usar ambos allow-scriptse allow-same-originao mesmo tempo, pois isso 		permite que o documento incorporado remova programaticamente o sandboxatributo. Embora 		seja aceito, este caso não é mais seguro do que não utilizar o sandboxatributo.

	• O sandbox em geral só tem uma ajuda mínima se o invasor puder fazer com que o conteúdo 	potencialmente hostil seja exibido no navegador do usuário fora de um sandbox iframe. 		Recomenda-se que esse conteúdo seja veiculado a partir de um domínio dedicado separado , 		para limitar os danos potenciais.

	• O sandbox atributo não é suportado no Internet Explorer 9 e versões anteriores, nem no 		Opera.


-----> referrerpolicy 
atributo HTML do elemento <iframe>, que define qual referenciador é enviado ao buscar o recurso.
O valor ideal a se utilizar é o no-referrer:

• no-referrer:
Nenhuma informação de referência é enviada junto com as solicitações.

Saiba mais: https://developer.mozilla.org/pt-BR/docs/Web/HTML/Element/iframe
Saiba mais: https://developer.mozilla.org/en-US/docs/Web/API/HTMLIFrameElement/referrerPolicy



                                       ==  FORMULÁRIOS HTML INFORMAÇÕES INICIAIS  ==


Toda tela de login, toda página de cadastro, todo campo de busca vai precisar obrigatoriamente de um formulário HTML para começar.

Para construir um formulário, vamos utilizar os seguintes elementos <form> , <label> , <input> , <textarea> , e <button> .



                                          ==  FORMULÁRIOS HTML (FORM ELEMENT)  ==


• Elemento <form> :

Todos formulários HTML começam com um elemento <form> . Este elemento define um formulário. É um elemento de container como um elemento <div> ou <p> , mas ele também suporta alguns atributos específicos para configurar a forma como o formulário se comporta. Todos os seus atributos são opcionais, mas é considerada a melhor prática sempre definir pelo menos o atributo action e o atributo method.

	• O atributo ''action'' define o local (uma URL) em que os dados recolhidos do formulário                        devem ser enviados ( exemplo: cadastro.php , exemplo.js , exemplo.py ).

	• O atributo ''method'' define qual o método HTTP para enviar os dados (ele pode ser "GET" ou 	 "POST" ).

-----> GET
O metodo get condensa todos os dados digitados pelo visitante e envia como parte do endereço acessado. Podemos usar GET em um formulário contanto que: 

• Os dados a serem enviados não sejam sensíveis, como endereços, números de documentos, senhas, etc.

• Tivermos formulários simples e que possam ser compartilhados facilmente através de uma URL. Por exemplo, o Google usa GET no seu formulário, pois você pode enviar um link para qualquer pessoa, já com a ação da busca embutida, como em http://google.com.br/search?q=Gustavo+Guanabara

• Os dados a serem enviados nunca ultrapassem 3000 bytes.

• Não contenha envio de arquivos como imagens (i.e. fotos de perfil), arquivos PDF,
etc. 


-----> POST
Pega os dados digitados e envia diretamente no corpo da requisição HTTP que será feita quando seu visitante clicar para enviar o formulário. Sendo assim, os dados não irão aparecer na URL.
o método POST é mais recomendado para casos em que:

• Não queremos que os dados apareçam explicitamente na URL do navegador.

• Capturamos dados como senhas, documentos e outro tipo de dado sensível.

• Precisamos enviar muitos dados (acima de 3000 bytes ~ sem limites).

• Precisamos enviar imagens ou outros tipos de arquivos. 

Saiba mais sobre GET e POST -> https://stackoverflow.com/questions/46585/



                                            ==  FORMULÁRIOS HTML (LABEL ELEMENT)  ==


• Elemento <label> :

o elemento HTML <label> faz a a relação entre qual é o objeto do formulário e qual é a etiqueta dele, representa uma legenda para um item em uma interface de usuário. Ele pode estar associado com um elemento de controle, colocando este dentro do elemento label, ou usando o atributo for. Tal controle é chamado o controle etiquetado do elemento etiqueta. Um input pode ser associado a diversas etiquetas (<label>). Seus atributos são :


-----> accesskey
A tecla de atalho para acessar este elemento a partir do teclado.


-----> for
O ID de um elemento de formulário relacionados com label no mesmo documento como o 		elemento label. O primeiro elemento tal no documento com uma ID correspondente ao valor 		do atributo é o controle marcado por este elemento etiqueta.


-----> form
O elemento form que o elemento label está associado a (seu proprietário formulário). O 		valor do atributo deve ser uma identificação de um <form> elemento no mesmo 			documento. Se este atributo não for especificado, este elemento <label> deve ser um 			descendente de um elemento <form>. Este atributo permite que você coloque 			elementos do rótulo em qualquer lugar dentro de um documento, e não apenas como 			descendentes de seus elementos de formulário.



                                               ==  FORMULÁRIOS HTML (INPUT ELEMENT)  ==


• Elemento <input> :

O elemento HTML <input> é usado para criar controles interativos para formulários baseados na web para receber dados do usuário. A semântica de um <input> varia consideravelmente dependendo do valor de seu atributo  '' type ''.

Atributos do elemento <input> :

Os Principais atributos são: type , name , id , required

-----> type
O tipo de controle a ser exibido. O tipo padrão é text, se este atributo não for especificado. Os valores possíveis são:

• button
• checkbox  (obrigatório o parâmetro value)
• color
• date
• datetime
• datetime-local
• email
• file  (Obs: Usar method=''post'' no <form> quando usar este valor)
• hidden
• image
• month
• number
• password
• radio  (Obs: todo input de type="radio" que pertencerem ao mesmo grupo tem que possuir o mesmo    nome, e é obrigatório o parâmetro value)
• range
• reset
• search
• submit
• tel
• text (valor padrão)
• url
• week

Veja todos os types e outros atributos do elemento <input> nesse site: 
https://developer.mozilla.org/en-US/docs/Web/HTML/Element/Input


-----> id :
Importante para o elemento <label> e para o javascript


-----> list
Identifica uma lista de opções pré-definidas de sugestões para o usuário. O valor deve ser o id de um elemento <datalist> no mesmo documento. O navegador mostrará apenas opções que são valores válidos para este elemento. Este atributo é ignorado quando o valor do atributo type é hidden, checkbox, radio, file ou um tipo de botão.


-----> maxlength :
Se o valor do atributo type for text, email, search, password, tel ou url, este atributo especifica o número máximo de caracteres (em pontos de código Unicode) que o usuário pode inserir; para outros tipos de controle, este atributo é ignorado. Seu valor pode exceder o do atributo size. Se não for especificado, o usuário pode inserir uma quantidade ilimitada de caracteres. Especificar um valor negativo resulta no comportamento padrão, isto é, o usuário vai poder inserir um número ilimitado de caracteres. Esta regra só é validada quando o valor do atributo é modificado.


-----> minlength :
Se o valor do atributo type for text, email, search, password, tel ou url, este atributo especifica o número mínimo de caracteres (em pontos de código Unicode) que o usuário pode inserir; para outros tipos de controle, este atributo é ignorado.


-----> max :
O valor máximo (numérico ou data) para este item, que não deve ser menor que seu valor mínimo (atributo min).


-----> min :
O valor mínimo (númerico ou data) para este item, que não deve ser maior do que seu máximo (atributo max).


-----> name :
O nome do controle, que é enviado junto com os dados do formulário.


-----> pattern :
Uma expressão regular usada para validar o valor do controle. O padrão deve casar com o valor completo da entrada, não apenas uma parte. Use o atributo title para descrever o padrão para ajudar o usuário. Este atributo é aplicado quando o valor do atributo type é text, search, tel, url ou email; caso contrário ele é ignorado. A linguagem da expressão regular é a mesma do JavaScript. O padrão não deve estar entre barras. O simbolo ^ define o inicio do value e $ define o final.


-----> placeholder :
Uma dica para o usuário do que ele pode inserir no controle. O texto do atributo não deve conter quebras de linha. Este atributo é aplicado quando o valor do atributo type é text, search, tel, url ou email; caso contrário, ele é ignorado.


-----> required :
Este atributo especifica que o usuário deve preencher o campo com um valor antes de enviar o formulário. Ele não pode ser usado quando o atributo type está definido como hidden, image ou um tipo de botão (submit, reset ou button). As pseudoclasses CSS :optional e :required serão aplicadas ao campo como for apropriado.


-----> step :
Trabalha junto com os atributos min e max para limitar os incrementos em que valores numéricos ou datas podem ser alterados. Seu valor pode ser any ou um número de ponto flutuante positivo ( exemplo 0.5 ) . Se o valor não for any, o controle aceita somente valores múltiplos valor do incremento maiores que o mínimo.


-----> size :
O tamanho inicial do controle. Este valor é em pixels a não ser que o valor do atributo type seja text ou password. Neste caso, este valor é um número inteiro de caracteres. A partir do HTML5, este atributo é aplicado apenas quando o atributo type está definido como text, search, tel, url, email ou password; caso contrário, ele é ignorado. Além disso, o tamanho deve ser maior que zero. Se você não especificar um tamanho, o valor padrão 20 é usado.


-----> src
Se o valor do atributo type for image, este atributo especifica uma URI para a localização de uma imagem a ser exibida no botão gráfico; caso contrário, este atributo é ignorado.


-----> value :
Define o valor inicial do controle. Este atributo é opcional, EXCETO quando o valor do atributo type for radio ou checkbox.


-----> width
Se o valor do atributo type for image, este atributo define a largura da imagem exibida para o botão.



-> Existem muitos outros atributos para o elemento <input> e não vale a pena colocar tudo isso em um bloco de notas, iria ficar tudo desorganizado.

Veja todos os types e outros atributos do elemento <input> nesse site: 
https://developer.mozilla.org/en-US/docs/Web/HTML/Element/Input


Saiba mais -> https://developer.mozilla.org/pt-BR/docs/Learn/Forms/Your_first_form
Saiba mais -> https://www.w3schools.com/html/html_forms.asp
Saiba mais -> PDF sobre formulários do Curso em Vídeo.



                                              ==  FORMULÁRIOS HTML (SELECT ELEMENT)  ==


• Elemento <select> :

O elemento HTML select (<select>) representa um controle que apresenta um menu de opções. As opções dentro do menu são representadas pelo elemento <option>, que podem ser agrupados por elementos <optgroup>. As opções podem ser pré-selecionadas para o usuário. Seus atributos são :


-----> autofocus
Este atributo permite especificar que um controle de formulário deve ter foco de entrada quando a página é carregada, a não ser que o usuário o substitua, por exemplo digitando em um controle diferente. Somente um elemento de formulário em um documento pode ter o atributo autofocus, que é booleano.


-----> disabled
Este atributo booleano indica que o usuário não pode interagir com o controle. Caso esse atributo não seja especificado, o controle herda a configuração do elemento que o contém, por exemplo o elemento fieldset; se não há nenhum elemento que o contém com o atributo disabled, então o controle está habilitado.


-----> form
O elemento form ao qual o elemento select é associado (algo como "formulário dono" do select). Se este atributo for especificado, seu valor deve ser o ID de um elemento form no mesmo documento. Isso permite que você coloque elementos select em qualquer lugar dentro do documento, e não apenas como descendentes de elementos form.


-----> multiple
Este atributo booleano indica que várias opções podem ser selecionadas na lista. Se não for especificado, apenas uma opção poderá ser selecionada de cada vez.


-----> name
O nome do controle


-----> required
Um atributo booleano que indica que uma opção com um valor de string que não esteja vazia deve ser selecionada.


-----> size
Se o controle é apresentado como uma list box com scroll, este atributo representa o número de linhas na list box que devem estar visíveis num determinado momento. Os navegadores não são obrigados a apresentar elementos select com uma list box scroll. O valor padrão é 0.

Saiba mais -> https://developer.mozilla.org/pt-BR/docs/Web/HTML/Element/select#disabled



                                              ==  FORMULÁRIOS HTML (OPTION ELEMENT)  ==


• Elemento <option>

Em um formulário Web, o elemento HTML <option> é usado para criar um controle que representa um item dentro de um elemento HTML5 <select>, <optgroup> ou <datalist>. Seus atributos são :


-----> disabled
Se este atributo booleano estiver definido, esta opção não é selecionável. Frequentemente navegadores acinzentam este tipo de controle, e ele deixa de receber quaisquer eventos de navegação, como cliques do mouse ou eventos relacionados a foco. Se este atributo não estiver definido, o elemento ainda pode ser desabilitado se um de seus ancestrais é um elemento <optgroup> desabilitado.


-----> label
Este atributo é o texto para o rótulo indicando o significado da opção. Se o atributo label não estiver definido, seu valor é o conteúdo de texto do elemento.


-----> selected
Se presente, este atributo booleano indica que a opção está selecionada inicialmente. Se o elemento <option> for descendente de um elemento <select> cujo atributo multiple não está definido, apenas um único <option> deste elemento <select> pode ter o atributo selected.


-----> value
O conteúdo textual deste atributo representa o rótulo que explica a opção. Se ele não estiver definido, seu valor padrão é o texto contido no elemento.

Saiba mais -> https://developer.mozilla.org/pt-BR/docs/Web/HTML/Element/option



                                            ==  FORMULÁRIOS HTML (OPTGROUP ELEMENT)  ==


• Elemento <optgroup>

Em um Formulário Web, o elemento HTML <optgroup> cria um agrupamento de opções dentro do elemento <select>. Seus atributos são :


-----> disabled
Se este atributo booleano for definido, nenhum dos itens neste optgroup poderá ser selecionado. Muitos navegadores marcam como cinza e não permitem que o elemento receba nenhum evento de navegação, como cliques do mouse ou foco.


-----> label
É o nome do optgroup, é o que os navegadores irão exibir como rótulo. Este atributo é obrigatório se o elemento for usado.

Saiba mais -> https://developer.mozilla.org/pt-BR/docs/Web/HTML/Element/optgroup



                                            ==  FORMULÁRIOS HTML (DATALIST ELEMENT)  ==


•Elemento <datalist>

O elemento HTML Datalist (<datalist>) contém um conjunto de elementos <option> que representam as opções possíveis para o valor de outros controles.
Esse elemento não tem nenhum atributo a não ser os global attributes, comuns para todos os elementos.

Depois de colocar uma lista de opções (<option>) dentro da datalist, adicione um id para a tag <datalist>.
Depois na tag <input> adicione o parâmetro  ''list''  e coloque o id do datalist como valor do parâmetro 
list.

Saiba mais sobre o parâmetro list na parte de FORMULÁRIOS HTML (INPUT ELEMENT)

Saiba mais -> https://developer.mozilla.org/pt-BR/docs/Web/HTML/Element/datalist



                                             ==  FORMULÁRIOS HTML (OUTPUT ELEMENT)  ==


• Elemento <output>

Um recurso que foi adicionado à HTML5 foi o elemento <output>, que pode ser usado para executar tarefas simples e gerar uma saída na tela. 

Essa execução é feita usando a Linguagem de Programação JavaScript e pode ser executada diretamente no atributo "oninput" do formulário. Os dados recebidos no elemento output não serão enviados como os outros dados de outros elementos do formulário.


Os atributos da tag <output> são :

-----> for
Uma lista de IDs de outros elementos, indicando que estes elementos contribuiram com valores de entrada (input) para o cálculo (ou outros afetados).

-----> form
O elemento form ao qual este elemento está associado (seu "proprietário do formulário"). O valor do atributo deve ser um ID de um elemento form no mesmo documento. Se este atributo não está especificado, o elemento output deve ser descendente de um elemento form. Este atributo permite que você coloque elementos output em qualquer lugar em um documento, não apenas como descendentes de seus elementos form.

-----> name
O nome do elemento.


Saiba mais -> https://developer.mozilla.org/pt-BR/docs/Web/HTML/Element/Output



                                             ==  FIELDSET E LEGEND PARA FORMULÁRIOS  ==


• Elemento <fieldset>  e  <legend>

O elemento HTML <fieldset> é usado para agrupar elementos, assim como labels (<label>), dentro de um formulário web.
Ele tem que ser colocado dentro do elemento <form>. 
E dentro deste elemento ( <fieldset> ) irá conter o elemento <legend> (opcional) e os outros elementos de formulário, como <label>, <input> , etc.

O Elemento HTML <legend> representa um rótulo para o conteúdo do seu elemento pai <fieldset>.

Saiba mais sobre <legend> -> https://developer.mozilla.org/pt-BR/docs/Web/HTML/Element/legend
Saiba mais sobre <fieldset> -> https://developer.mozilla.org/pt-BR/docs/Web/HTML/Element/fieldset


